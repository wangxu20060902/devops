#######################################sonarqube 安装#############################
#环境需求:mysql ,jdk, SonarQube ## jdk 已经安装配置完成
1.Mysql 安装
wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm  #下载mysql repo源
yum -y localinstall mysql57-community-release-el7-11.noarch.rpm   #安装repo源
yum -y install mysql-community-server   #安装mysql
systemctl start mysqld      #启动mysql
systemctl status mysqld.service   #查看mysql 状态
firewall-cmd --zone=public --permanent --add-port=3306/tcp  #防火墙端口放行
firewall-cmd --reload     #重新加载firewalld
grep 'password' /var/log/mysqld.log   #查看mysql 初始密码
mysql -uroot -p/euh2D4rB%Dx    #登录mysql
##登录到mysql 需要更改初始密码才能对其做更多的操作
alter user user() identified by "gemalto.123";  ##此时会报错说mysql的密码策略不允许
set global validate_password_policy=LOW;
set global validate_password_length=6;     ##执行这两条语句之后就可以了执行上面的操作了

#为sonar配置数据库
CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci; //设置编码格式
GRANT ALL ON sonar.* TO 'sonar'@'localhost' IDENTIFIED BY 'gemalto.123'; //创建账号以及密码
GRANT ALL ON sonar.* TO 'sonar'@'%' IDENTIFIED BY 'gemalto.123'; //赋予账号权限
FLUSH PRIVILEGES; //刷新权限

##############sonarqube安装##########################
1.root用户无法启动es， 现在创建sonar用户，另外sonarqube 的版本要选择支持mysql的  目前7.2之前的版本都支持mysql
useradd sonar
password sonar
wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.2.zip
unzip sonarqube-7.2.zip   #解压文件
mv sonarqube-7.2 /usr/local/sonar  #部署路径
chown -R sonar. sonar   #更改属主和权限

vim sonar.properties
sonar.jdbc.username=sonar   ##数据库账号
sonar.jdbc.password=gemalto.123  ##数据库密码
sonar.jdbc.url=jdbc:mysql://192.168.140.128:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance&useSSL=false  ##数据库配置

#启动sonar
su sonar /usr/local/sonar/bin/linux-x86-64/sonar.sh start
tail  -n 200 -f /usr/local/sonar/logs/sonar.log    #查看启动日志
firewall-cmd --zone=public --permanent --add-port=9000/tcp  #防火墙端口放行
#登录验证
http://192.168.140.128:9000/  #点击login 输入username:admin password: admin 弹出一个Generate a token  输入一个生成token的字符此处我用的jenkins记录一下token 后面会用到记录如下：
jenkins: f45dad00ce7f0bc4918df5c9b64edfae1a0af4c5


##########################jenkins 和sonarqube 结合##############################

##jenkins sonarqube 检查的流程是jenkins sonarqube scanner插件 >>>调用 sonarqube scanner  >>>提交审查代码到 sonarqube 服务器  >>> 然后保存审查结果到mysql
##在jenkins 上安装插件sonarqube scanner
Manage Jenkins >>>manage Plugins >>> 可选插件 >>> sonarqube scanner     #安装sonarqube scanner 插件
##在服务器中安装sonarqube scanner有两种方式一种通过jenkins 来安装另外一种模式通过命令，此处以jenkins 安装为例
Jenkins >>> Global Tool Configuration >>> SonarQube Scanner >>> Name: 自己定义   Install automatically： 选择自己需要的版本
#服务器安装sonarqube scanner
wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.5.0.2216.zip
unzip sonar-scanner-cli-4.5.0.2216.zip 
mv sonar-scanner-4.5.0.2216 /usr/local/sonar-scanner
#修改配置
vim /usr/local/sonar-scanner/conf/sonar-scanner.properties  # 添加下列内容
#----- Default SonarQube server
sonar.host.url=http://192.168.140.128:9000
#----- Default source code encoding
sonar.sourceEncoding=UTF-8
sonar.jdbc.username=sonar
sonar.jdbc.password=sonar
sonar.jdbc.url=jdbc:mysql://192.168.140.128:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance

#保存并退出
#配置环境变量 
vim /etc/profile
#在最后添加以下内容
export SONAR_SCANNER_HOME=/usr/local/sonar-scanner
export PATH=${SONAR_SCANNER_HOME}/bin:${PATH}

保存并退出

#生效配置
source /etc/profile
#测试
sonar-scanner -h 
#出现以下内容，则安装成功
INFO: 
INFO: usage: sonar-scanner [options]
INFO: 
INFO: Options:
INFO:  -D,--define <arg>     Define property
INFO:  -h,--help             Display help information
INFO:  -v,--version          Display version information
INFO:  -X,--debug            Produce execution debug output

#在jenkins中配置sonarqube scanner  环境
Jenkins >>> Global Tool Configuration >>>SonarQube Scanner >>>	新增 SonarQube Scanner(Name:sonar-scanner,SONAR_RUNNER_HOME:/usr/local/sonar-scanner	)

#jenkins 中配置sonarqube 服务器的信息
manage jenkins >>>Configure System >>>SonarQube servers >>>Add SonarQube (name:sonarqube server; Server URL: http://192.168.140.128:9000/) ##此处需要凭证验证，现在添加凭证验证

manage jenkins >>>manage credentail >>>全局凭据 (unrestricted) >>> 添加凭据 >>> （类型:secert text;Secret:f45dad00ce7f0bc4918df5c9b64edfae1a0af4c5)

#在项目中使用sonarqube 做代码质量分析 此例是以freestyle 项目为例项目名springboot
Jenkins >>> springboot >>>构建 >>> Execute SonarQube Scanner (Task to run: scan ; JDK: java;
Analysis properties:

sonar.projectKey=${JOB_NAME}
sonar.sources=.
sonar.projectName=${JOB_NAME}
sonar.projectVersion=${BUILD_VERSION}
sonar.language=java
sonar.sourceEncoding=UTF-8
sonar.sources=$WORKSPACE
sonar.java.binaries=$WORKSPACE

#然后保存应用
#点击立即构建看看构建结果

#在项目中使用sonarqube 做代码质量分析 此例是以流水线项目为例

pipeline {
   agent any

   stages {
      stage('pull code for gitlab') {
         steps {
            echo 'start pull code'
            checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'fa20d737-4d10-48c1-878b-48fc31a867a6', url: 'git@192.168.140.130:avacar-test/springboot.git']]])
            echo 'start pull completed'
         }
      }
      stage('sonar check code') {
         steps {
            echo 'check starting now'
            script {
              // 引入sonarqube scanner 工具
	           scannerHome = tool 'sonar-scanner' //sonar-scanner 为global tool configurtion sonarqube scanner name
            }
              // 引入sonarqube服务器的环境
               withSonarQubeEnv('sonarqube'){
                  sh "${scannerHome}/bin/sonar-scanner"
               }
            echo 'check completed now'
         }
      }
      stage('maven build') {
         steps {
            echo 'maven build'
            sh label: '', script: 'mvn clean package'
         }
      }
      stage('deployment project') {
         steps {
             echo 'deploy project to container'
            deploy adapters: [tomcat8(credentialsId: '40754592-d813-4009-9cf3-329ca03a7ead', path: '', url: 'http://192.168.140.129:8080')], contextPath: null, war: 'target/*.war'
         }
      }
    }
    post('pull result with email') {
    always {
     emailext attachLog: true, body: '${FILE,path="../jenkins_email_template.html"}', compressLog: true, subject: '${ENV, var="JOB_NAME"}-第${BUILD_NUMBER}次构建日志', to: 'wangxu20060902@163.com,xu.m.wang@futuremove.cn'
    }
   }
}


点击构建进行测试
