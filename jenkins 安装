jenkins 安装

https://www.cnblogs.com/yanjieli/p/10613212.html
java环境的安装
jenkins 的运行基于java环境的先安装Java 8 or Java 11
yum search openjdk
yum install java-1.8.0-openjdk.x86_64 -y  
java -version

jenkins的安装和部署

sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
yum install jenkins -y
systemctl start jenkins  ##启动jenkins
systemctl status jenkins ## 设置开机启动

防火墙配置
firewall-cmd --zone=public --permanent --add-port=8080/tcp
firewall-cmd --zone=public --permanent --add-service=http
firewall-cmd --reload

登录到web界面
默认密码在cat /var/lib/jenkins/secrets/initialAdminPassword

###########jenkins国内镜像地址修改###############
find / -name 'default.json'
/var/lib/jenkins/updates/default.json
cd /var/lib/jenkins/updates
执行 命令

sed -i 's/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g' default.json && sed -i 's/http:\/\/www.google.com/https:\/\/www.baidu.com/g' default.json

点击 jenkins 的系统管理 --> 插件管理，打开插件管理页面，如图：
Jenkins 欢迎页面点击系统管理，进入系统管理页面，并点击插件管理进入到插件管理页面，如下图：
在插件管理页面点击高级（Advanced），如下图：
在高级选项卡找到更新网站（Update Site）菜单项，将默认网站更新为 https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json 并提交

##############jenkins 汉化########################

Manage Jenkins->Manage Plugins，点击Available，搜索"Chinese"
安装此插件：	Localization: Chinese (Simplified)
Manage Jenkins >>> configure system >>>Locale Default Language  : zh_CN    并打勾  Ignore browser preference and force this language to all users

#############jenkins 账号管理插件Role-based Authorization Strategy #######

安装插件Manage Jenkins >>> configure system >>>Role-based Authorization Strategy 
开启权限管理  Jenkins
Manage Jenkins >>> Configure Global Security >>>	授权策略  勾选  Role-Based Strategy  就可以使用了

Manage Jenkins >>> Manage and Assign Roles     Manage Roles 管理角色  用来给角色分配权限 分为：
Global roles 全局角色
Item roles   项目角色
Node roles   节点角色

Assign Roles  分配角色  用来给用户分配角色的

#############jenkins 凭证管理Credentials Binding#############
Manage Jenkins >>>  Credentials Binding

Manage Jenkins >>>Manage Credentials  

###################jenkins java 和 maven 安装配置#####################
java安装
首先要去下载好JDK，Java SE 8的官方网址是http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
Linux提供了两种安装方式一个是.rpm，另一个是.tar.gz，我所使用的是.tar.gz
tar zxvf jdk-8u251-linux-x64.tar.gz
mv jdk1.8.0_251/ /usr/local/java
设置环境变量，需要修改/etc/profile文件
vim /etc/profile

export JAVA_HOME=/usr/local/java
export JRE_HOME=/usr/local/java/jre
export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH
使环境变量生效
source /etc/profile
查看java 信息
java -version  

安装maven
下载maven 安装包
https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz

解压
tar zxvf apache-maven-3.6.3-bin.tar.gz
mv apache-maven-3.6.3 /usr/local/maven

配置环境
export MAVEN_HOME=/usr/local/maven
export PATH=$PATH:$MAVEN_HOME/bin

使环境生效
source /etc/profile

在jenkins 中配置java和maven 环境一
配置java
Manage Jenkins >>> Global Tool Configuration >>> JDK >>>新增 JDK
JDK 别名： java
JAVA_HOME: /usr/local/java
配置maven
Manage Jenkins >>> Global Tool Configuration >>> Maven >>>新增 Maven
新增 maven
Maven name: maven
MAVEN_HOME: /usr/local/maven
 
Manage Jenkins >>> Global Tool Configuration >>> Maven 配置
默认 settings 提供: Seting file in filesystem
文件路径:/usr/local/maven/conf/settings.xml
默认全局 settings 提供: Global setting file on filesystem

在jenkins 中配置java和maven 环境二

Manage Jenkins >>> Configure System >>> 全局属性 >>> Environment variables
新增三个变量：
键：JAVA_HOME
值：/usr/local/java
键：MAVEN_HOME
值：/usr/local/maven
键：PATH+EXTRA
值：$MAVEN_HOME/bin

优化maven 仓库
创建本地仓库目录
mkdir -p /usr/local/maven/repo  
更改配置本地仓库路径
vim /usr/local/maven/conf/settings.xml

 <!-- localRepository
   | The path to the local repository maven will use to store artifacts.
   |
   | Default: ${user.home}/.m2/repository
-->
  <localRepository>/usr/local/maven/repo</localRepository>

  <!-- interactiveMode  
添加阿里云服务器地址 找到配置：<mirrors> 添加以下代码并保存
	<!--不使用默认仓库，改为阿里云仓库下载-->
	<mirror>
	  <id>alimaven</id>
	  <mirrorOf>central</mirrorOf>     
	  <name>aliyun maven</name>
	  <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
	</mirror>

测试maven 设置是否生效
回到项目中 以test001 项目为例
配置 >>>构建 >>> Execute shell >>> 命令添加：
mvn clean package

点击立即构建


#################jenkins tomcat 项目部署########################
jdk  tomcat 安装

安装jdk
去官网下载jdk的安装包
下载jdk rpm包 rpm -ivh jdk-8u152-linux-x64.rpm
#rpm -ivh jdk-8u152-linux-x64.rpm

#vi  /etc/profile          //配置环境变量

export JAVA_HOME=/usr/java/jdk1.8.0_152
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib/:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH

#java             //验证jdk
#javac    //验证jdk
#java -version    //查看java版本

安装tomcat9
下载tomcat
wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.24/bin/apache-tomcat-9.0.24.tar.gz

tar zxvf apache-tomcat-9.0.24.tar.gz
mv apache-tomcat-9.0.24 /usr/local/tomcat9
 
配置自启动，切换至Tomcat的bin目录执行vi setenv.sh，并按i进入编辑模式，拷贝以下代码粘贴

#add tomcat pid
CATALINA_PID="$CATALINA_BASE/tomcat.pid"
#add java opts
JAVA_OPTS="-server -XX:PermSize=256M -XX:MaxPermSize=1024m -Xms512M -Xmx1024M -XX:MaxNewSize=256m"

chmod +x setenv.sh
vim /usr/lib/systemd/system/tomcat.service

拷贝以下代码粘贴（注意将第6和7行的Tomcat路径/usr/local/tomcat9 换成你自己的Tomcat的绝对路径）

[Unit]
Description=Tomcat
After=syslog.target network.target remote-fs.target nss-lookup.target
[Service]
Type=forking
PIDFile=/usr/local/tomcat9/tomcat.pid
ExecStart=/usr/local/tomcat9/bin/startup.sh
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true
[Install]
WantedBy=multi-user.target


//配置开机启动 
systemctl daemon-reload
systemctl enable tomcat
//启动tomcat
systemctl start tomcat
//停止tomcat
systemctl stop tomcat
//重启tomcat
systemctl restart tomcat

更改端口vim /usr/local/tomcat9/conf/server.xml
##目前端口也是默认端口
<<Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    <!-- A "Connector" using the shared thread pool-->
    <!--
    <Connector executor="tomcatThreadPool"
               port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
//按“i”进入编辑模式，将port="8080"改成port="80"
<Connector port="80" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    <!-- A "Connector" using the shared thread pool-->
    <!--
    <Connector executor="tomcatThreadPool"
               port="80" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
			   
配置gui-manager项目部署方式，切换至Tomcat conf目录，输入vi tomcat-users.xml打开文件，
按“i”进入编辑模式，拷贝以下代码放置</tomcat-users>标签之间(注意将password和username换成你自己的)
			   
<role rolename="manager"/>     
<role rolename="admin"/> 
<role rolename="admin-gui"/>
<role rolename="manager-gui"/>
<user username="xxx" password="***" roles="admin-gui,manager-gui"/>

cd webapps/manager/META-INF/ 切换至目录，输入vi context.xml打开文件，按i进入编辑模式，将</Context> 标签下的<Valve> 标签注释掉

<Context antiResourceLocking="false" privileged="true" >
<!--注释掉此标签
 <Valve className="org.apache.catalina.valves.RemoteAddrValve"
         allow="127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1" />
-->
</Context>

systemctl restart tomcat
浏览器中直接输入你的服务器地址，例如ip地址（不用输端口号了，刚才把端口号改成80了），看见小猫咪，点击manager 输入账号密码即可部署你的项目了


Jenkins只是相当与一个容器，所以的功能都是相应的插件完成的，所以可以根据自己的功能要求安装相依的插件

Gitlab插件：GitLab Plugin 和 Gitlab Hook Plugin
Git插件： Git plugin
获取仓库提交的commit log： Git Changelog Plugin
自定义全局变量: Environment Injector Plugin
自定义邮件插件： Email Extension Plugin
获取当前登录用户信息： build-user-vars-plugin
显示代码测试覆盖率报表： Cobertura Plugin
来展示生成的单元测试报表，支持一切单测框架，如junit、nosetests等： Junit Plugin
ssh连接插件：SSH Slaves plugin
建后执行shell： PostBuildScript plugin

###事先配置好jenkins  configure system>>E-mail Notification  
###声明式流水线配置邮件通知
################
pipeline {
  agent {}
  environment {}
  tools {}
  options {}
  triggers {}
  parameters {}
  libraries {}
  stages {
      stage {
        agent {}
        environment {}
        tools {}
        steps {
            DSL statements
        }
        post {}
      stage {......}
      }
  }
  post {}
}
##############################
pipeline {
  agent any 
    stages{
      stage('beginning') {
          steps {
        // echo first jenkins pipeline
        echo "this is my first jenkins pipeline"
        }
      }
      stage('git') {
          steps {
        // echo first jenkins pipeline
        echo "git clone code"
      }
      }
      stage('test') {
          steps{
        // echo first jenkins pipeline
        echo "stest check"
      }
      }
    }
    post {
        always {
            mail to: "xu.wang@futuremove.cn",
            subject: "Status of pipeline: ${currentBuild.fullDisplayName}",
            body: "${env.BUILD_URL} has result ${currentBuild.result}"
        } 
      }
}

###脚本式流水线配置邮件通知

node('work-node01') {
    try {
     stage('beginning') {
        // echo first jenkins pipeline
        echo "this is my first jenkins pipeline"
      }
      stage('git') {
        // echo first jenkins pipeline
        echo "git clone code"
      }
      stage('test') {

        // echo first jenkins pipeline
      }
      currentBuild.result = 'SUCCESS'
    } 
    catch (err) {
        currentBuild.result = 'FAILURE'
    }
    finally {
        mail to: "xu.wang@futuremove.cn",
        subject: "Status of pipeline: ${currentBuild.fullDisplayName}",
        body: "${env.BUILD_URL} has result ${currentBuild.result}"
    }  
    }

jenkins  

###########jenkins配置邮件之：	E-mail Notification  
先到自己的163邮箱里开启授权码
配置项一：Jenkins Location：
System Admin e-mail address： wangxu20060902@163.com     ###发件人地址要和此地址保持一致
配置项二：E-mail Notification：
SMTP server： smtp.163.com   ###填写smtp服务器地址
Use SMTP Authentication   ###勾选
Password： ***************    ###填写授权码（密码根据自己的环境）
Use SSL      #####勾选
SMTP Port： 465  ####根据自己情况填写端口
##其他可以保持默认

###########jenkins配置邮件之：Extended E-mail Notification

SMTP server: smtp.163.com   ###填写smtp服务器地址
Default user E-mail suffix： @163.com    ###邮件后缀
use SMTP Authentication     ####勾选
User Name: wangxu20060902@163.com    ###填写发件邮箱
Password：  ******************          ###填写授权码
Use SSL      #####勾选
SMTP Port： 465  ####根据自己情况填写端口
Default Recipients:wangxu20060902@163.com  ###填写默认收件人
Default Content Type： HTML(test/html)
Default Triggers:   Always    ###此处根据自己的需求勾选
####其他项可以保持默认######
#############
邮件配置完成后需要到对应的项目里配置默认的邮件策略
jenkins>>${project name}>>configure>>Add post-build action>>Editable Email Notifination(E-mail Notifination)
Project Recipient List：  $DEFAULT_RECIPIENTS,wangxu20060902@163.com,xu.wang@futuremove.cn   #####填写收件人的地址
Triggers>>Add Triggers   ###根据自己的需求填写出发条件

###########jenkins配置邮件之：Publish over SSH
##jenkins 服务器上生成ssh key  执行命令：ssh-keygen  一直回车  
##配置jenkins 服务器到其他服务器的免密把本地的公钥（即cat /root/.ssh/id_rsa.pub） copy到其他服务的/root/.ssh/authorized_keys
###jenkins 要安装Publish over SSH 插件
Key：****************************************   #####此处填写jenkins 服务器的私钥即：
SSH Servers
name： ****** ###填写要ssh到的server name
Hostname： ip address ### 填写要远程ssh的ip 地址
Username： *****     ####填写要用来远程的用户名
Port： 22  ### 填写ssh 端口
######如果又需求可以继续添加要远程发布的服务器

######jenkins 之管理员密码的破解#######
cd /var/lib/jenkins/users   ###切换到jenkins的users目录下找到对应的用户
vim ${username}/config.xml   ####编译对应用户的文件因为jenkins的数据没有存到数据库中，找到<passwordHash>#jbcrypt:$2a$10$GrfXcHm/xOTsDmgY6BmdD.OxZd0G94qrNfdCS97HtuCg/MeRoi9Xq</passwordHash>
对自己经过hash运算后的值进行更换就行了
systemctl restart jenkins  ###重启jenkins进行验证

#######jenkins 发布java项目########################
